import pytest

from exchange.ratios import (
    ForexEngine, HTXEngine, CoinMarketCapEngine,
    GarantexEngine, GarantexP2P
)
from exchange.context import Context
from exchange.entities import ExchangeConfig, Account
from exchange.entities import BestChangeMethodMapping, BestChangeCodeRule


@pytest.mark.asyncio
class TestConfig:

    @pytest.fixture()
    def default_config(self) -> BestChangeMethodMapping:
        return BestChangeMethodMapping(
            codes={
                'SBERRUB': BestChangeCodeRule(
                    **{'or': ['–°–±–µ—Ä', 'SBER']}
                ),
                'TCSBRUB': BestChangeCodeRule(
                    **{'and': ['–¢–∏–Ω—å', 'Tinkoff']}
                )
            },
            ignores=[
                BestChangeCodeRule(
                    **{'or': ['CNY', 'AliPay']}
                )
            ]
        )

    async def test_or(self, default_config: BestChangeMethodMapping):
        s1 = '–°–±–µ—Ä–±–∞–Ω–∫ /–°–±–µ—Ä –¢–∏–Ω—å–∫–æ—Ñ—Ñ/Tinkoff'
        codes1 = default_config.match_codes(s1)
        assert codes1 == ['SBERRUB', 'TCSBRUB']

        s2 = '–°–ë–ü;–°–ë–ï–†;–ê–õ–¨–§–ê'
        codes2 = default_config.match_codes(s2)
        assert codes2 == ['SBERRUB']

        s3 = '–ù–ê–õ–ò–ß–ù–´–ï –ü–û –ú–ò–†–£ RUB CNY USD AED EUR KRW THB'
        codes3 = default_config.match_codes(s3)
        assert codes3 == []

    async def test_and(self, default_config: BestChangeMethodMapping):
        s1 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ/Tinkoff'
        codes1 = default_config.match_codes(s1)
        assert codes1 == ['TCSBRUB']

        s2 = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
        codes2 = default_config.match_codes(s2)
        assert codes2 == []

    async def test_ignore(self, default_config: BestChangeMethodMapping):
        s1 = ' –ü–ï–†–ï–í–û–î–´ –í –ö–ò–¢–ê–ô üá®üá≥ü•° –Æ–ê–ù–¨ ü•ü –õ–£–ß–®–ò–ô –ö–£–†–° ü•° CNY üßß Alipay Wechat Union pay Uni... –°–±–µ—Ä'
        codes1 = default_config.match_codes(s1)
        assert codes1 == []
